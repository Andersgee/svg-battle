// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"] //for planetscale
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma" //for planetscale
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    //app
    intId             Int                @unique @default(autoincrement()) //for hashid only
    createdTargets    Target[]
    targetSubmissions TargetSubmission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//application
model Target {
    id             Int                @id @default(autoincrement())
    createdAt      DateTime           @default(now())
    creator        User               @relation(fields: [creatorId], references: [id])
    creatorId      String
    title          String
    svg            String             @db.VarChar(10000)
    submissions    TargetSubmission[]
    svgColorValues String             @db.VarChar(1000)
    svgTagNames    String             @db.VarChar(1000)
    description    String?            @db.VarChar(3000)
}

//relation tables https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#relation-tables
model TargetSubmission {
    createdAt  DateTime @default(now())
    code       String   @db.VarChar(10000)
    codeLength Int
    score      Int
    target     Target   @relation(fields: [targetId], references: [id], onDelete: Cascade)
    targetId   Int
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    @@id([targetId, userId])
}

model Example {
    id String @id @default(cuid())
}
